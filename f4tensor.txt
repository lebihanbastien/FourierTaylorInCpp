float ****f4tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh, long nwl, long nwh)
/* allocate a float 4tensor with range t[nrl..nrh][ncl..nch][ndl..ndh][nwl..nwh] */
{
	long i,j,k, nrow=nrh-nrl+1,ncol=nch-ncl+1,ndep=ndh-ndl+1,nwid=nwh-nwl+1 ;
	float ****t;

	/* allocate pointers to pointers to pointers to rows */
	t=(float ****) malloc((size_t)((nrow+NR_END)*sizeof(float***)));
	if (!t) nrerror("allocation failure 1 in f4tensor()");
	t += NR_END;
	t -= nrl;

	/* allocate pointers to pointers to rows and set pointers to them */
	t[nrl]=(float ***) malloc((size_t)((nrow*ncol+NR_END)*sizeof(float**)));
	if (!t[nrl]) nrerror("allocation failure 2 in f4tensor()");
	t[nrl] += NR_END;
	t[nrl] -= ncl;

	/* allocate pointers to rows and set pointers to them */
	t[nrl][ncl]=(float **) malloc((size_t)((nrow*ncol*ndep+NR_END)*sizeof(float*)));
	if (!t[nrl][ncl]) nrerror("allocation failure 3 in f4tensor()");
	t[nrl][ncl] += NR_END;
	t[nrl][ncl] -= ndl;

	/* allocate rows and set pointers to them */
	t[nrl][ncl][ndl]=(float *) malloc((size_t)((nrow*ncol*ndep*nwid+NR_END)*sizeof(float)));
	if (!t[nrl][ncl][ndl]) nrerror("allocation failure 4 in f4tensor()");
	t[nrl][ncl][ndl] += NR_END;
	t[nrl][ncl][ndl] -= nwl;

    for(i=nrl;i<=nrh;i++)
	{
		if (i > nrl)
		{
			t[i] = t[i-1] + ncol ;
		    t[i][ncl]=t[i-1][ncl]+ncol*ndep;
		    t[i][ncl][ndl] = t[i-1][ncl][ndl] + ncol*ndep*nwid ;
		}
		for(j=ncl;j<=nch;j++)
		{
			if (j > ncl)
			{
				t[i][j]=t[i][j-1] + ndep ;
				t[i][j][ndl] = t[i][j-1][ndl] + ndep*nwid ;
			}

			for(k=ndl;k<=ndh;k++)
			{
				if (k > ndl) t[i][j][k] = t[i][j][k-1] + nwid ;
			}
		}
	}

	/* return pointer to pointer to array of pointers to rows */
	return t;
}
void free_f4tensor(float ****t, long nrl, long nrh, long ncl, long nch, 
	long ndl, long ndh, long nwl, long nwh)
/* free a float f4tensor allocated by f4tensor() */
{
	free((FREE_ARG) (t[nrl][ncl][ndl]+nwl-NR_END));
	free((FREE_ARG) (t[nrl][ncl]+ndl-NR_END));
	free((FREE_ARG) (t[nrl]+ncl-NR_END));
	free((FREE_ARG) (t+nrl-NR_END));
}